{% extends layout? : "@PayumCore/layout.html.twig" %}

{% block payum_body %}

  {% block square_payment_form %}
    <form method="POST" action="{{ actionUrl }}" id="square-payment-form" style="display: none">
      <input type="hidden" name="payment_intent" id="payment_intent" value=""/>
      <input type="hidden" name="verification_token" id="verification_token" value=""/>
    </form>

    <form id="payment-form">
    {% if imgUrl %}
			<img style="max-width: 100%; height: auto;" src="{{ imgUrl }}" />
    {% endif %}
      <div id="afterpay-button"></div>
      <div id="card-container"></div>
      <button id="card-button" type="button" style="visibility: hidden;">Pay {{ amount }}</button>
      <center style="margin-top: 10px;">
      <small>
      Powered by
      </small>
      <br>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3967.7 995.7" width="88" height="22"><path d="M828.4,0H166.2C74.4,0,0,74.4,0,166.2v662.2c0,91.8,74.4,166.2,166.2,166.2h662.2
    c91.8,0,166.2-74.4,166.2-166.2V166.2C994.6,74.4,920.2,0,828.4,0z M813.8,761.3c0,29-23.5,52.5-52.5,52.5h-528
    c-29,0-52.5-23.5-52.5-52.5v-528c0-29,23.5-52.5,52.5-52.5h528c29,0,52.5,23.5,52.5,52.5V761.3z M391.8,632.3
    c-16.7,0-30.1-13.5-30.1-30.2V391.3c0-16.7,13.4-30.3,30.1-30.3h211.1c16.6,0,30.1,13.5,30.1,30.3V602c0,16.7-13.5,30.2-30.1,30.2
    H391.8z M1258.3,617.9h108.6c5.4,61.5,47.1,109.5,131.2,109.5c75.1,0,121.3-37.1,121.3-93.2c0-52.5-36.2-76-101.4-91.4l-84.2-18.1
    c-91.4-19.9-160.2-78.7-160.2-174.7c0-105.9,94.1-178.3,216.3-178.3c129.4,0,212.7,67.9,219.9,168.3h-105
    C1592.3,293,1553.3,265,1490,265c-67,0-113.1,36.2-113.1,82.4s39.8,74.2,108.6,89.6l83.3,18.1c91.4,19.9,153.8,75.1,153.8,171.9
    c0,123.1-92.3,196.4-224.4,196.4C1349.7,823.3,1267.4,742.8,1258.3,617.9z M2111.1,994.6V814.5l7.1-79h-7.1
    c-24.9,56.8-77.2,87.9-148.2,87.9c-114.5,0-199.7-93.2-199.7-236.1c0-142.9,85.2-236.1,199.7-236.1c70.1,0,119.8,32.8,148.2,84.3
    h7.1V360h94.1v634.6H2111.1z M2114.6,587.2c0-91.4-55.9-144.7-124.3-144.7s-124.3,53.3-124.3,144.7c0,91.4,55.9,144.7,124.3,144.7
    S2114.6,678.7,2114.6,587.2z M2287.4,634.3V360h101.2v265.4c0,71.9,34.6,106.5,92.3,106.5c71,0,117.2-50.6,117.2-129.6V360h101.2
    v454.4h-94.1v-94.1h-7.1c-22.2,60.4-71,103-146.4,103C2343.3,823.3,2287.4,754.1,2287.4,634.3z M2760.9,687.5
    c0-85.2,59.5-134.9,165.1-141.1l125.1-8v-35.5c0-42.6-31.1-68.3-86.1-68.3c-50.6,0-80.8,25.7-88.8,62.1h-101.2
    c10.7-92.3,87-145.6,189.9-145.6c116.3,0,187.3,49.7,187.3,145.6v317.7h-94.1v-84.3h-7.1c-21.3,55.9-65.7,93.2-150.9,93.2
    C2818.6,823.3,2760.9,768.3,2760.9,687.5z M3051.2,631.6v-24l-102.1,7.1c-55,3.5-79.9,24-79.9,64.8c0,34.6,28.4,59.5,68.3,59.5
    C3009.5,739,3051.2,692.9,3051.2,631.6z M3227.7,814.5V360h94.1v87h7.1c13.3-59.5,58.6-87,126-87h46.2v91.4h-57.7
    c-65.7,0-114.5,42.6-114.5,123.4v239.6H3227.7z M3964.1,605.9h-345.3c5.3,83.4,63.9,130.5,128.7,130.5c55,0,89.6-22.2,109.2-59.5
    H3957c-27.5,92.3-108.3,146.4-210.4,146.4c-134,0-228.1-100.3-228.1-236.1c0-135.8,96.7-236.1,229-236.1
    c133.1,0,220.1,91.4,220.1,205C3967.7,578.4,3965.9,589.9,3964.1,605.9z M3867.4,535.8c-3.5-63-55.9-105.6-119.8-105.6
    c-60.4,0-110.9,38.2-123.4,105.6H3867.4z" fill="black" class="svelte-1qhoav6"></path></svg>
      </center>
    </form>
    <div id="payment-status-container"></div>
  {% endblock %}

  {% block square_init_js %}
    <script
      type="text/javascript"
      {% if use_sandbox %}
      src="https://sandbox.web.squarecdn.com/v1/square.js"
      {% else %}
      src="https://web.squarecdn.com/v1/square.js"
      {% endif %}
    ></script>
    <script>
      const appId = "{{ appId }}"
      const locationId = "{{ locationId }}"
      async function initializeCard(payments) {
        const card = await payments.card();
        await card.attach('#card-container');

        return card;
      }

      async function tokenize(paymentMethod) {
        const tokenResult = await paymentMethod.tokenize();
        if (tokenResult.status === 'OK') {
          return tokenResult.token;
        } else {
          let errorMessage = `Tokenization failed with status: ${tokenResult.status}`;
          if (tokenResult.errors) {
            errorMessage += ` and errors: ${JSON.stringify(
              tokenResult.errors
            )}`;
          }

          throw new Error(errorMessage);
        }
      }

      function buildPaymentRequest(payments) {
        const req = payments.paymentRequest({
          countryCode: '{{ country }}',
          currencyCode: '{{ currencyCode }}',
          total: {
            amount: "{{ numeric_amount }}",
            label: 'Total',
          },
          requestShippingContact: {{ ship_item ? 'true' : 'false' }},
          pickupContact: {{ pickupContact|raw }},
        });

        // Note how afterpay has its own listeners
        req.addEventListener('afterpay_shippingaddresschanged', async function (_address) {
          {% if afterpay_addresschange_url %}
          let response = await fetch('{{ afterpay_addresschange_url }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify({
              merchant_reference: '{{ merchant_reference }}',
              address: _address
            })
          })
          if (response.ok) {
            let json = await response.json()
            return {
              shippingOptions: json
            }
          } else {
            alert("Could not get shipping options " + response.status)
          }
          {% else %}
          return {
            shippingOptions: {{ afterpay_shipping_options|raw }}
          }
          {% endif %}
        });

        req.addEventListener('afterpay_shippingoptionchanged', function (_option) {
          {% if afterpay_shippingchange_url %}
          fetch('{{ afterpay_shippingchange_url }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify({
              merchant_reference: '{{ merchant_reference }}',
              option: _option
            })
          })
          {% endif %}
        });

        return req;
      }

      async function initializeAfterpay(payments) {
        const paymentRequest = buildPaymentRequest(payments)

        const afterpay = await payments.afterpayClearpay(paymentRequest);
        await afterpay.attach('#afterpay-button');

        return afterpay;
      }

      // status is either SUCCESS or FAILURE;
      function displayPaymentResults(status) {
        const statusContainer = document.getElementById(
          'payment-status-container'
        );
        if (status === 'SUCCESS') {
          statusContainer.classList.remove('is-failure');
          statusContainer.classList.add('is-success');
        } else {
          statusContainer.classList.remove('is-success');
          statusContainer.classList.add('is-failure');
        }

        statusContainer.style.visibility = 'visible';
      }

      document.addEventListener('DOMContentLoaded', async function () {
        if (!window.Square) {
          throw new Error('Square.js failed to load properly');
        }

        let payments;
        try {
          payments = window.Square.payments(appId, locationId);
        } catch {
          const statusContainer = document.getElementById(
            'payment-status-container'
          );
          statusContainer.className = 'missing-credentials';
          statusContainer.style.visibility = 'visible';
          return;
        }

        let afterpay;
        try {
{% if use_afterpay %}
          afterpay = await initializeAfterpay(payments);
{% endif %}
        } catch (e) {
          console.error('Initializing Afterpay/Clearpay failed', e);
        }

        let card;
        try {
          card = await initializeCard(payments);
        } catch (e) {
          console.error('Initializing Card failed', e);
          return;
        }

        // Show Pay button
        document.getElementById('card-button').style.visibility = 'visible'

        async function verifyBuyer(payments, token) {
          const verificationDetails = {{ verificationDetails|raw }}
          const verificationResults = await payments.verifyBuyer(
            token,
            verificationDetails
          );
          return verificationResults.token;
        }

        // Checkpoint 2.

        if (afterpay !== undefined) {
          const afterpayButton = document.getElementById('afterpay-button');
          afterpayButton.addEventListener('click', async function (event) {
            await handlePaymentMethodSubmission(event, afterpay);
          });
        }

        async function handlePaymentMethodSubmission(event, paymentMethod, shouldVerify = false) {
          event.preventDefault();

          // disable the submit button as we await tokenization and make a payment request.
          cardButton.disabled = true;
          const token = await tokenize(paymentMethod);
          let verificationToken;

          if (shouldVerify) {
            verificationToken = await verifyBuyer(
              payments,
              token
            );
          }

          document.querySelector('#payment_intent').value = token;
          document.querySelector('#verification_token').value = verificationToken;
          document.querySelector('#square-payment-form').submit();
        }

        const cardButton = document.getElementById('card-button');
        cardButton.addEventListener('click', async function (event) {
          await handlePaymentMethodSubmission(event, card, true);
        });
      });
    </script>
  {% endblock %}
{% endblock %}
{% block payum_stylesheets %}
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<style>
/* Variables */
* {
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: 16px;
  -webkit-font-smoothing: antialiased;
  display: flex;
  justify-content: center;
  align-content: center;
  height: 100vh;
}

form {
  width: 30vw;
  align-self: center;
  box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1),
    0px 2px 5px 0px rgba(50, 50, 93, 0.1), 0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);
  border-radius: 7px;
  padding: 40px;
}

input {
  border-radius: 6px;
  margin-bottom: 6px;
  padding: 12px;
  border: 1px solid rgba(50, 50, 93, 0.1);
  height: 44px;
  font-size: 16px;
  width: 100%;
  background: white;
}

.hidden {
  display: none;
}

/* Buttons and links */
button {
  background: #5469d4;
  color: #ffffff;
  font-family: Arial, sans-serif;
  border-radius: 0 0 4px 4px;
  border: 0;
  padding: 12px 16px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  display: block;
  transition: all 0.2s ease;
  box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
  width: 100%;
}
button:hover {
  filter: contrast(115%);
}
button:disabled {
  opacity: 0.5;
  cursor: default;
}

#afterpay-button button {
  margin-bottom:10px;
}

@media only screen and (max-width: 600px) {
  form {
    width: 80vw;
  }
}

</style>
{% endblock %}
